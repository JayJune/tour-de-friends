{"version":3,"sources":["components/TDFNav.js","components/TDFLoginPage.js","App.js","serviceWorker.js","index.js"],"names":["TDFNav","props","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","TDFLoginPage","myScreenHeight","window","innerHeight","Form","style","height","Group","controlId","Label","Control","type","placeholder","Button","App","context","state","loginName","this","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mTAoBeA,EAhBA,SAAAC,GACX,OACI,kBAACC,EAAA,EAAD,CAAQC,kBAAgB,EAACC,OAAO,KAAKC,GAAG,UAAUC,QAAQ,SACtD,kBAACJ,EAAA,EAAOK,MAAR,CAAcC,KAAK,SAAnB,mBACA,kBAACN,EAAA,EAAOO,OAAR,CAAeC,gBAAc,0BAC7B,kBAACR,EAAA,EAAOS,SAAR,CAAiBC,GAAG,yBAChB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACX,kBAACD,EAAA,EAAIE,KAAL,CAAUP,KAAK,SAAf,QACA,kBAACK,EAAA,EAAIE,KAAL,CAAUP,KAAK,SAAf,QACA,kBAACK,EAAA,EAAIE,KAAL,CAAUP,KAAK,WAAf,UACA,kBAACK,EAAA,EAAIE,KAAL,CAAUP,KAAK,WAAf,c,eCgBLQ,EA1BM,SAAAf,GACjB,IAAIgB,EAAiBC,OAAOC,YAC5B,OACI,kBAACC,EAAA,EAAD,KACI,yBAAKN,UAAU,uBAAuBO,MAAO,CAACC,OAAQL,IAClD,yBAAKH,UAAU,uBACX,kBAACM,EAAA,EAAKG,MAAN,CAAYC,UAAU,iBAClB,kBAACJ,EAAA,EAAKK,MAAN,mBACA,kBAACL,EAAA,EAAKM,QAAN,CAAcC,KAAK,QAAQC,YAAY,kBAG/C,yBAAKd,UAAU,uBACX,kBAACM,EAAA,EAAKG,MAAN,CAAYC,UAAU,qBAClB,kBAACJ,EAAA,EAAKK,MAAN,iBACA,kBAACL,EAAA,EAAKM,QAAN,CAAcC,KAAK,WAAWC,YAAY,eAGlD,yBAAKd,UAAU,uBACX,kBAACe,EAAA,EAAD,CAAQvB,QAAQ,UAAUqB,KAAK,UAA/B,aCCLG,E,kDAjBb,WAAY7B,EAAO8B,GAAU,IAAD,8BAC1B,cAAM9B,EAAO8B,IACRC,MAAQ,CACXC,UAAW,IAHa,E,qDAQ1B,OACE,yBAAKnB,UAAU,OACb,kBAAC,EAAD,CAAQmB,UAAWC,KAAKF,MAAMC,YAC9B,kBAAC,EAAD,W,GAZUE,IAAMC,WCOJC,QACW,cAA7BnB,OAAOoB,SAASC,UAEe,UAA7BrB,OAAOoB,SAASC,UAEhBrB,OAAOoB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.03d8a20e.chunk.js","sourcesContent":["import React from 'react';\r\nimport Nav from 'react-bootstrap/Nav'\r\nimport Navbar from 'react-bootstrap/Navbar'\r\n\r\nconst TDFNav = props => {\r\n    return(\r\n        <Navbar collapseOnSelect expand=\"md\" bg=\"warning\" variant=\"light\">\r\n            <Navbar.Brand href=\"#home\">Tour de friends</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                    <Nav.Link href=\"#home\">Home</Nav.Link>\r\n                    <Nav.Link href=\"#news\">News</Nav.Link>\r\n                    <Nav.Link href=\"#social\">Social</Nav.Link>\r\n                    <Nav.Link href=\"#stream\">Stream</Nav.Link>\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    )\r\n}\r\nexport default TDFNav;","import React from 'react';\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nconst TDFLoginPage = props => {\r\n    var myScreenHeight = window.innerHeight;\r\n    return(\r\n        <Form>\r\n            <div className=\"vertical-center-flex\" style={{height: myScreenHeight}}>\r\n                <div className=\"center-with-padding\">\r\n                    <Form.Group controlId=\"formLoginName\">\r\n                        <Form.Label>Login Name</Form.Label>\r\n                        <Form.Control type=\"email\" placeholder=\"Enter login\" />\r\n                    </Form.Group>\r\n                </div>\r\n                <div className=\"center-with-padding\">\r\n                    <Form.Group controlId=\"formBasicPassword\">\r\n                        <Form.Label>Password</Form.Label>\r\n                        <Form.Control type=\"password\" placeholder=\"Password\" />\r\n                    </Form.Group>\r\n                </div>\r\n                <div className=\"center-with-padding\">\r\n                    <Button variant=\"primary\" type=\"submit\">\r\n                        Login\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\nexport default TDFLoginPage;","import React, { Component } from \"react\";\nimport './App.css';\nimport TDFNav from \"./components/TDFNav\";\nimport TDFLoginPage from \"./components/TDFLoginPage\";\n\nclass App extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      loginName: \"\"\n    }\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <TDFNav loginName={this.state.loginName}/>\n        <TDFLoginPage/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
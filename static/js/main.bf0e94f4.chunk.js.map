{"version":3,"sources":["components/News.js","components/TDFNav.js","components/TDFLoginPage.js","history.js","App.js","serviceWorker.js","index.js"],"names":["News","props","TDFNav","Navbar","collapseOnSelect","expand","bg","variant","Brand","Toggle","aria-controls","Collapse","id","Nav","className","Link","onClick","routeTo","loggedIn","NavDropdown","title","loginName","Item","toggleLoggedIn","TDFLoginPage","myFormGroupName","valid","myFormControlName","style","display","type","name","onChange","changeHandler","placeholder","value","Button","customHistory","createBrowserHistory","App","context","event","target","newState","state","setState","location","history","push","newLoggedIn","newLoginName","this","exact","path","React","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bf0e94f4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst News = props => {\r\n    return(\r\n       <div>some cool news</div>\r\n    )\r\n}\r\nexport default News;","import React from 'react';\r\nimport Nav from 'react-bootstrap/Nav'\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport NavDropdown from 'react-bootstrap/NavDropdown'\r\n\r\nconst TDFNav = props => {\r\n    return(\r\n        <Navbar collapseOnSelect expand=\"md\" bg=\"warning\" variant=\"light\">\r\n            <Navbar.Brand>Tour de Friends</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                    <Nav.Link onClick={() => props.routeTo(\"/\")}>News</Nav.Link>\r\n                    <Nav.Link onClick={() => props.routeTo(\"/social\")}>Social</Nav.Link>\r\n                    <Nav.Link onClick={() => props.routeTo(\"/stream\")}>Stream</Nav.Link>\r\n                </Nav>\r\n                {props.loggedIn ?\r\n                    <Nav>\r\n                        <NavDropdown title={props.loginName} id=\"collasible-nav-dropdown\">\r\n                            <NavDropdown.Item>My Profile</NavDropdown.Item>\r\n                            <NavDropdown.Item onClick={props.toggleLoggedIn}>Log out</NavDropdown.Item>\r\n                        </NavDropdown>\r\n                    </Nav>\r\n                : <Nav>\r\n                    <Nav.Link onClick={() => props.routeTo(\"/login\")}>Login</Nav.Link>\r\n                </Nav>\r\n                }\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    )\r\n}\r\nexport default TDFNav;","import React from 'react';\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nconst TDFLoginPage = props => {\r\n    var myFormGroupName = props.valid ? \"form-group\" : \"form-group has-danger\";\r\n    var myFormControlName = props.valid ? \"form-control\" : \"form-control is-invalid\";\r\n    return(\r\n        <div style={{display: \"flex\"}}>\r\n            <div className=\"pad-center\"></div>\r\n            <div className=\"vertical-center-flex\">\r\n                <div className=\"center-with-padding\">\r\n                    <div className={myFormGroupName}>\r\n                        <input type=\"text\" \r\n                            className={myFormControlName}\r\n                            id=\"loginName\"\r\n                            name=\"loginName\" \r\n                            onChange={props.changeHandler}\r\n                            placeholder=\"Username\" \r\n                            value={props.loginName} \r\n                        />\r\n                        {!props.valid && <div className=\"invalid-feedback\">Please enter a valid username.</div>}\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <input type=\"password\" \r\n                            className=\"form-control\"\r\n                            id=\"password\"\r\n                            placeholder=\"Password\" \r\n                        />\r\n                    </div>\r\n                    <Button variant=\"warning btn-lg btn-block\" onClick={props.toggleLoggedIn}>\r\n                        Login\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n            <div className=\"pad-center\"></div>\r\n        </div>\r\n    )\r\n}\r\nexport default TDFLoginPage;","import createBrowserHistory from 'history/createBrowserHistory'\r\n\r\nconst customHistory = createBrowserHistory()\r\nexport default customHistory;","import React, { Component } from \"react\";\nimport './App.css';\nimport News from \"./components/News\";\nimport TDFNav from \"./components/TDFNav\";\nimport TDFLoginPage from \"./components/TDFLoginPage\";\nimport history from \"./history.js\";\nimport {\n  Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nclass App extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      loginName: \"\",\n      loggedIn: false,\n      valid: true\n    }\n  }\n\n  changeHandler = event => {\n    const name = event.target.name;\n    const value = event.target.value;\n    var newState = {...this.state};\n    newState[name] = value;\n    this.setState({\n      ...newState\n    })\n  }\n\n  routeTo = (location) => {\n    history.push(location);\n  }\n\n  toggleLoggedIn = () => {\n    var newLoggedIn = this.state.loggedIn;\n    var newLoginName = this.state.loginName;\n    if(newLoggedIn){\n      this.setState({\n        loggedIn: false,\n        loginName: \"\",\n        valid: true\n      });\n    }\n    else{\n      if(newLoginName){\n        this.setState({\n          loggedIn: true,\n          loginName: newLoginName\n        });\n        history.push('/');\n      }\n      else{\n        this.setState({\n          valid: false\n        });\n      }\n    }\n  } \n\n  render(){\n    return (\n      <div className=\"App\">\n        <Router history={history}>\n          <TDFNav \n            loggedIn={this.state.loggedIn}\n            loginName={this.state.loginName}\n            routeTo={this.routeTo}\n            toggleLoggedIn={this.toggleLoggedIn}\n          />\n          <Switch>\n            <Route exact path=\"/\">\n              <News />\n            </Route>\n            <Route path=\"/login\">\n              <TDFLoginPage \n                changeHandler={this.changeHandler}\n                toggleLoggedIn={this.toggleLoggedIn}\n                valid={this.state.valid}\n              />\n            </Route>\n            {/* <Route path=\"/about\">\n              <About />\n            </Route>\n            <Route path=\"/myProfile\">\n              <Profile />\n            </Route> */}\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
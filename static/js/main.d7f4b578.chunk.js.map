{"version":3,"sources":["components/TDFNav.js","components/TDFLoginPage.js","App.js","serviceWorker.js","index.js"],"names":["TDFNav","props","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","loggedIn","loginName","onClick","toggleLoggedIn","TDFLoginPage","myFormGroupName","valid","myFormControlName","console","log","style","display","type","name","onChange","changeHandler","placeholder","value","Button","App","context","event","target","newState","state","setState","newLoggedIn","newLoginName","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d7f4b578.chunk.js","sourcesContent":["import React from 'react';\r\nimport Nav from 'react-bootstrap/Nav'\r\nimport Navbar from 'react-bootstrap/Navbar'\r\n\r\n\r\nconst TDFNav = props => {\r\n    return(\r\n        <Navbar collapseOnSelect expand=\"md\" bg=\"warning\" variant=\"light\">\r\n            <Navbar.Brand href=\"#home\">Tour de Friends</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                    <Nav.Link href=\"#home\">Home</Nav.Link>\r\n                    <Nav.Link href=\"#news\">News</Nav.Link>\r\n                    <Nav.Link href=\"#social\">Social</Nav.Link>\r\n                    <Nav.Link href=\"#stream\">Stream</Nav.Link>\r\n                </Nav>\r\n                {props.loggedIn &&\r\n                    <Nav>\r\n                        <Nav.Link>{props.loginName}</Nav.Link>\r\n                        <Nav.Link onClick={props.toggleLoggedIn}>Log out</Nav.Link>\r\n                    </Nav>\r\n                }\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    )\r\n}\r\nexport default TDFNav;","import React from 'react';\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nconst TDFLoginPage = props => {\r\n    var myFormGroupName = props.valid ? \"form-group\" : \"form-group has-danger\";\r\n    var myFormControlName = props.valid ? \"form-control\" : \"form-control is-invalid\";\r\n    console.log(props.valid);\r\n    return(\r\n        <div style={{display: \"flex\"}}>\r\n            <div className=\"pad-center\"></div>\r\n            <div className=\"vertical-center-flex\">\r\n                <div className=\"center-with-padding\">\r\n                    <div className={myFormGroupName}>\r\n                        <input type=\"text\" \r\n                            className={myFormControlName}\r\n                            id=\"loginName\"\r\n                            name=\"loginName\" \r\n                            onChange={props.changeHandler}\r\n                            placeholder=\"Username\" \r\n                            value={props.loginName} \r\n                        />\r\n                        {!props.valid && <div className=\"invalid-feedback\">Please enter a valid username.</div>}\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <input type=\"password\" \r\n                            className=\"form-control\"\r\n                            id=\"password\"\r\n                            placeholder=\"Password\" \r\n                        />\r\n                    </div>\r\n                    <Button variant=\"warning btn-lg btn-block\" onClick={props.toggleLoggedIn}>\r\n                        Login\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n            <div className=\"pad-center\"></div>\r\n        </div>\r\n    )\r\n}\r\nexport default TDFLoginPage;","import React, { Component } from \"react\";\nimport './App.css';\nimport TDFNav from \"./components/TDFNav\";\nimport TDFLoginPage from \"./components/TDFLoginPage\";\n\nclass App extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      loginName: \"\",\n      loggedIn: false,\n      valid: true\n    }\n  }\n\n  changeHandler = event => {\n    const name = event.target.name;\n    const value = event.target.value;\n    var newState = {...this.state};\n    newState[name] = value;\n    this.setState({\n      ...newState\n    })\n  }\n\n  toggleLoggedIn = () => {\n    var newLoggedIn = this.state.loggedIn;\n    var newLoginName = this.state.loginName;\n    if(newLoggedIn){\n      this.setState({\n        loggedIn: false,\n        loginName: \"\",\n        valid: true\n      });\n    }\n    else{\n      if(newLoginName){\n        this.setState({\n          loggedIn: true,\n          loginName: newLoginName\n        });\n      }\n      else{\n        this.setState({\n          valid: false\n        });\n      }\n    }\n  } \n\n  render(){\n    return (\n      <div className=\"App\">\n        <TDFNav \n          loggedIn={this.state.loggedIn}\n          loginName={this.state.loginName}\n          toggleLoggedIn={this.toggleLoggedIn}\n        />\n        {this.state.loggedIn ? \n        <div>show logged in stuff</div>\n        : <TDFLoginPage \n            changeHandler={this.changeHandler}\n            toggleLoggedIn={this.toggleLoggedIn}\n            valid={this.state.valid}\n          />\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}